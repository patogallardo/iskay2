// # -*- mode: c -*-
#pragma once

#include <math.h>
#include "defs.h"
#include "weight_defs_DOUBLE.h"

#ifdef __AVX512F__
#include "avx512_calls.h"
#endif

#ifdef __AVX__
#include "avx_calls.h"
#endif

#ifdef __SSE4_2__
#include "sse_calls.h"
#endif

#include <stdint.h>

typedef union {
#ifdef __AVX512F__
  AVX512_FLOATS a512;/* add the bit width for vector register*/
#endif
#ifdef __AVX__
  union {
    AVX_FLOATS a;
    AVX_FLOATS a256;
  };
#endif
#ifdef __SSE4_2__
    union {
      SSE_FLOATS s;
      SSE_FLOATS s128;
    };
#endif
    DOUBLE d;
} weight_union_DOUBLE;

// Info about a particle pair that we will pass to the weight function
typedef struct
{
    weight_union_DOUBLE weights0[MAX_NUM_WEIGHTS];
    weight_union_DOUBLE weights1[MAX_NUM_WEIGHTS];
    weight_union_DOUBLE dx, dy, dz;
    
    // These will only be present for mock catalogs
    weight_union_DOUBLE parx, pary, parz;

    //added to export mu
    weight_union_DOUBLE mu_sq;
    weight_union_DOUBLE mu;
    //end added to export mu
    
    int64_t num_weights;
} pair_struct_DOUBLE;

typedef DOUBLE (*weight_func_t_DOUBLE)(const pair_struct_DOUBLE*);
#ifdef __AVX512F__
typedef AVX512_FLOATS (*avx512_weight_func_t_DOUBLE)(const pair_struct_DOUBLE*);
#endif
#ifdef __AVX__
typedef AVX_FLOATS (*avx_weight_func_t_DOUBLE)(const pair_struct_DOUBLE*);
#endif
#ifdef __SSE4_2__
typedef SSE_FLOATS (*sse_weight_func_t_DOUBLE)(const pair_struct_DOUBLE*);
#endif

//////////////////////////////////
// Weighting functions
//////////////////////////////////

/*
 * The pair weight is the product of the particle weights
 */
static inline DOUBLE pair_product_DOUBLE(const pair_struct_DOUBLE *pair){
    return pair->weights0[0].d*pair->weights1[0].d;
//      return pair->mu_sq.d;
}

#ifdef __AVX512F__
static inline AVX512_FLOATS avx512_pair_product_DOUBLE(const pair_struct_DOUBLE *pair){
    return AVX512_MULTIPLY_FLOATS(pair->weights0[0].a512, pair->weights1[0].a512);
}
#endif

#ifdef __AVX__
static inline AVX_FLOATS avx_pair_product_DOUBLE(const pair_struct_DOUBLE *pair){
    return AVX_MULTIPLY_FLOATS(pair->weights0[0].a, pair->weights1[0].a);
}
#endif

#ifdef __SSE4_2__
static inline SSE_FLOATS sse_pair_product_DOUBLE(const pair_struct_DOUBLE *pair){
    return SSE_MULTIPLY_FLOATS(pair->weights0[0].s, pair->weights1[0].s);
}
#endif

//////////////////////////////////
// c_ij weights
//////////////////////////////////
/*
 * The pair weight is the product of the particle weights
 */
static inline DOUBLE c_DOUBLE(const pair_struct_DOUBLE *pair){
      return pair->mu.d;
}

#ifdef __AVX512F__
static inline AVX512_FLOATS avx512_c_DOUBLE(const pair_struct_DOUBLE *pair){
      return pair->mu.a512;
}
#endif

#ifdef __AVX__
static inline AVX_FLOATS avx_c_DOUBLE(const pair_struct_DOUBLE *pair){
      return pair->mu.a;
}
#endif

#ifdef __SSE4_2__
static inline SSE_FLOATS sse_c_DOUBLE(const pair_struct_DOUBLE *pair){
      return pair->mu.s;
}
#endif

//////////////////////////////////
// end c_ij weights
//////////////////////////////////



//////////////////////////////////
// c_ij^2 weights
//////////////////////////////////

static inline DOUBLE c_sq_DOUBLE(const pair_struct_DOUBLE *pair){
    return pair->mu_sq.d;
}
#ifdef __AVX512F__
static inline AVX512_FLOATS avx512_c_sq_DOUBLE(const pair_struct_DOUBLE *pair){
    return pair->mu_sq.a512;
}
#endif

#ifdef __AVX__
static inline AVX_FLOATS avx_c_sq_DOUBLE(const pair_struct_DOUBLE *pair){
    return pair->mu_sq.a;
}
#endif

#ifdef __SSE4_2__
static inline SSE_FLOATS sse_c_sq_DOUBLE(const pair_struct_DOUBLE *pair){
    return pair->mu_sq.s;
}
#endif

//////////////////////////////////
// end c_ij^2 weights
//////////////////////////////////

//////////////////////////////////
// cdT
/////////////////////////////////

static inline DOUBLE cdT_DOUBLE(const pair_struct_DOUBLE *pair){
//    return pair->weights0[0].d*pair->weights1[0].d;
      return pair->mu.d * (pair->weights0[0].d-pair->weights1[0].d);
}

#ifdef __AVX512F__
static inline AVX512_FLOATS avx512_cdT_DOUBLE(const pair_struct_DOUBLE *pair){
//    return AVX512_MULTIPLY_FLOATS(pair->weights0[0].a512, pair->weights1[0].a512);
      return AVX512_MULTIPLY_FLOATS(pair->mu.a512, AVX512_SUBTRACT_FLOATS(pair->weights0[0].a512, pair->weights1[0].a512));
}
#endif

#ifdef __AVX__
static inline AVX_FLOATS avx_cdT_DOUBLE(const pair_struct_DOUBLE *pair){
    return AVX_MULTIPLY_FLOATS(pair->mu.a, AVX_SUBTRACT_FLOATS(pair->weights0[0].a, pair->weights1[0].a));
}
#endif

#ifdef __SSE4_2__
static inline SSE_FLOATS sse_cdT_DOUBLE(const pair_struct_DOUBLE *pair){
    return SSE_MULTIPLY_FLOATS(pair->mu.s, SSE_SUBTRACT_FLOATS(pair->weights0[0].s, pair->weights1[0].s));
}
#endif
//////////////////////////////////
// end cdT
/////////////////////////////////

//////////////////////////////////
// dT_ferreira
/////////////////////////////////

static inline DOUBLE pair_diff_DOUBLE(const pair_struct_DOUBLE *pair){
      return pair->weights0[0].d - pair->weights1[0].d;
}

#ifdef __AVX512F__
static inline AVX512_FLOATS avx512_pair_diff_DOUBLE(const pair_struct_DOUBLE *pair){
//    return AVX512_MULTIPLY_FLOATS(pair->weights0[0].a512, pair->weights1[0].a512);
      return AVX512_SUBTRACT_FLOATS(pair->weights0[0].a512, pair->weights1[1].a512);
}
#endif

#ifdef __AVX__
static inline AVX_FLOATS avx_pair_diff_DOUBLE(const pair_struct_DOUBLE *pair){
//    return AVX_MULTIPLY_FLOATS(pair->weights0[0].a, pair->weights1[0].a);
      return AVX_SUBTRACT_FLOATS(pair->weights0[0].a, pair->weights1[0].a);
}
#endif

#ifdef __SSE4_2__
static inline SSE_FLOATS sse_pair_diff_DOUBLE(const pair_struct_DOUBLE *pair){
//    return SSE_MULTIPLY_FLOATS(pair->weights0[0].s, pair->weights1[0].s);
      return SSE_SUBTRACT_FLOATS(pair->weights0[0].s, pair->weights1[0].s);
}
#endif
//////////////////////////////////
// end dT_ferreira
/////////////////////////////////



//////////////////////////////////
// Utility functions
//////////////////////////////////


/* Gives a pointer to the weight function for the given weighting method
 * and instruction set.
 */
static inline weight_func_t_DOUBLE get_weight_func_by_method_DOUBLE(const weight_method_t method){
    switch(method){
        case PAIR_PRODUCT:
            return &pair_product_DOUBLE;
        case C_FERREIRA:
            return &c_DOUBLE;
        case C2_FERREIRA:
            return &c_sq_DOUBLE;
        case C_dT_FERREIRA:
            return &cdT_DOUBLE;
        case dT_FERREIRA:
            return &pair_diff_DOUBLE;
        default:
        case NONE:
            return NULL;
    }
}

#ifdef __AVX512F__
static inline avx512_weight_func_t_DOUBLE get_avx512_weight_func_by_method_DOUBLE(const weight_method_t method){
    switch(method){
        case PAIR_PRODUCT:
            return &avx512_pair_product_DOUBLE;
        case C2_FERREIRA:
            return &avx512_c_sq_DOUBLE;
        case C_FERREIRA:
            return &avx512_c_DOUBLE;
        case C_dT_FERREIRA:
            return &avx512_cdT_DOUBLE;
        case dT_FERREIRA:
            return &avx512_pair_diff_DOUBLE;
        default:
        case NONE:
            return NULL;
    }
}
#endif


#ifdef __AVX__
static inline avx_weight_func_t_DOUBLE get_avx_weight_func_by_method_DOUBLE(const weight_method_t method){
    switch(method){
        case PAIR_PRODUCT:
            return &avx_pair_product_DOUBLE;
        case C2_FERREIRA:
            return &avx_c_sq_DOUBLE;
        case C_FERREIRA:
            return &avx_c_DOUBLE;
        case C_dT_FERREIRA:
            return &avx_cdT_DOUBLE;
        case dT_FERREIRA:
            return &avx_pair_diff_DOUBLE;
        default:
        case NONE:
            return NULL;
    }
}
#endif

#ifdef __SSE4_2__
static inline sse_weight_func_t_DOUBLE get_sse_weight_func_by_method_DOUBLE(const weight_method_t method){
    switch(method){
        case PAIR_PRODUCT:
            return &sse_pair_product_DOUBLE;
        case C2_FERREIRA:
            return &sse_c_sq_DOUBLE;
        case C_FERREIRA:
            return &sse_c_DOUBLE;
        case C_dT_FERREIRA:
            return &sse_cdT_DOUBLE;
        case dT_FERREIRA:
            return &sse_pair_diff_DOUBLE;
        default:
        case NONE:
            return NULL;
    }
}
#endif
